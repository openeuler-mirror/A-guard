#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
import os
import shutil
import click
from core import ProjectMapping
from command import command
from logger import logger
from conf import config
from core.install import UnifyBuildInstallVerify


def obs_binary_rpm_download(branch, package, arch):
    """
    Download the binary package generated by obs
    :param branch: branch of warehouse
    :param package: packge name
    :param arch: system architecture
    """
    p_map = ProjectMapping()
    projects = p_map.branch_project(branch=branch)
    if not projects:
        click.echo(
            click.style(
                "There is no project corresponding to the target branch", fg="red"
            )
        )
        exit(1)
    for project in projects:
        code, _, _ = command(
            cmds=["osc", "getbinaries", project, package, "standard_" + arch, arch],
            cwd=os.path.join(config.workspace, "old_rpms"),
        )
        if not code:
            logger.info("Downloading the archive rpm package is complete")
            exit(0)
    logger.error("Failed to download the archive binary package.")


def ebs_binary_rpm_download(package, arch):
    """
    Download the binary package generated by ebs
    :param package: packge name
    :param arch: system architecture
    """
    cmds = f"ccb select builds build_id={config.build_id} -f ground_projects"
    code, out, error = command(cmds=cmds.split())
    if code:
        logger.error(
            f"Failed to get the ground projects,command: {cmds} error: {error}."
        )
        exit(1)
    try:
        ground_projects = UnifyBuildInstallVerify.json_loads(out)
        projects = [ground_project["name"] for ground_project in ground_projects[-1]["_source"]["ground_projects"]]
        logger.info(f"ground_project[name]:{projects}")
    except (ValueError, IndexError, KeyError):
        logger.error(
            f"Failed to get the repo ID of the ground project, build id: {config.build_id}"
        )
        exit(1)
    if package == "kernel":
        package = "kernel:kernel"
    for project in projects:
        cmds = f"ccb download os_project={project} packages={package} architecture={arch} -d -b all"
        logger.info(f"ccb download:{cmds}")
        code, out, _ = command(
            cmds=cmds.split(), cwd=os.path.join(config.workspace, "old_rpms")
        )
        logger.info(f"ccb download code:{code}")
        folder = os.path.join(config.workspace, "old_rpms", f"{project}-{arch}-{package}")
        if os.path.exists(folder):
            logger.info(f"Download the archive binary package successfully from os_project:{project}.")
        break
    if not os.path.exists(folder):
        logger.error("Failed to download the archive binary package.")
    else:
        for rpm_file in os.listdir(folder):
            if not os.path.isfile(os.path.join(folder, rpm_file)):
                continue
            shutil.move(
                os.path.join(folder, rpm_file),
                os.path.join(config.workspace, "old_rpms", rpm_file),
            )
        shutil.rmtree(folder)
        logger.info("Downloading the archive rpm package is complete")


@click.command("download", help="Download binary package")
@click.option("-p", "--package", help="Package name")
@click.option(
    "-a",
    "--arch",
    help="System architecture",
    type=click.Choice(["x86_64", "aarch64"], case_sensitive=False),
    default="x86_64",
    show_default=True,
    required=True,
)
@click.option("-b", "--branch", help="Target branch")
def download_rpm(package, arch, branch):
    """
    Download binary packages using osc or ebs
    :param package: package name
    :param arch: system architecture
    :param branch: branch of warehouse
    """
    click.echo("Start download binary rpm")
    if config.build_env == "obs":
        obs_binary_rpm_download(branch, package, arch)
    else:
        ebs_binary_rpm_download(package, arch)


__all__ = ("download_rpm",)
